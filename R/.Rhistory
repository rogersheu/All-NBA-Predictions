plot = lineplot,
device = "png",
path = "~/GitHub/All-Star-Predictions/R/Graphs/lineplots/",
width = 12,
height = 9,
units = "in",
dpi = 500,
)
}
library(dplyr)
library(ggplot2)
library(tibble)
library(janitor)
library(stringr)
library(lubridate)
library(matrixStats)
plot_predictions_line_graph <- function(startDate, endDate) { #YYYY-MM-DD format
### reshape2 provides a pretty big warning with the melt function...
options(warn=-1)
# Need to initialize these data frames or else you'll get an error later
# when you try to put data into them.
df_RF <- data.frame(Player = "")
df_SVM <- data.frame(Player = "")
df_MLP <- data.frame(Player = "")
df_XGBoost <- data.frame(Player = "")
df_Avg <- data.frame(Player = "")
for(date in seq(as_date(startDate), as_date(endDate), by = "day")) {
year <- substr(as_date(date), 1, 4)
month <- substr(as_date(date), 6, 7)
day <- substr(as_date(date), 9, 10)
date <- paste(year, month, day, sep="")
date_dash <- paste(year, month, day, sep="-")
fileName <- paste("stats_", date, "_modeled", sep="")
folderName <- paste(year, "-", month, "-", day, "/", sep="")
fullPath <- paste("~/GitHub/All-Star-Predictions/baseData/dailystats/", folderName, fileName, ".csv", sep="")
temp_stats <- read.csv(fullPath)
df <- select(temp_stats, Player, RF, SVM, kNN, MLP, XGBoost, Avg)
df$Avg <- rowMeans(subset(df, select = c(RF, SVM, MLP, XGBoost)), na.rm = TRUE) # Removed kNN because it is consistently lower than the other models.
# Only filtered out practically irrelevant players
topCandidates <- filter(df, Avg >= 0) # Change this to 0.25 if needed
### Tried using lapply on these next few, but was not successful.
# Isolates data
RFonly <- select(topCandidates, Player, RF)
SVMonly <- select(topCandidates, Player, SVM)
MLPonly <- select(topCandidates, Player, MLP)
XGBoostonly <- select(topCandidates, Player, XGBoost)
Avgonly <- select(topCandidates, Player, Avg)
# Combines all such data
df_RF <- merge(df_RF, RFonly, by = "Player", all = TRUE)
df_SVM <- merge(df_SVM, SVMonly, by = "Player", all = TRUE)
df_MLP <- merge(df_MLP, MLPonly, by = "Player", all = TRUE)
df_XGBoost <- merge(df_XGBoost, XGBoostonly, by = "Player", all = TRUE)
df_Avg <- merge(df_Avg, Avgonly, by = "Player", all = TRUE)
# Renames columns to dates
names(df_RF)[names(df_RF) == 'RF'] <- date_dash
names(df_SVM)[names(df_SVM) == 'SVM'] <- date_dash
names(df_MLP)[names(df_MLP) == 'MLP'] <- date_dash
names(df_XGBoost)[names(df_XGBoost) == 'XGBoost'] <- date_dash
names(df_Avg)[names(df_Avg) == 'Avg'] <- date_dash
}
topCandidates <<- topCandidates
# Removes first column
df_RF <- df_RF[-1,]
df_SVM <- df_SVM[-1,]
df_MLP <- df_MLP[-1,]
df_XGBoost <- df_XGBoost[-1,]
df_Avg <- df_Avg[-1,]
df_RF$Avg <- rowMeans(subset(df_RF, select = c(-Player)), na.rm = TRUE)
df_SVM$Avg <- rowMeans(subset(df_SVM, select = c(-Player)), na.rm = TRUE)
df_MLP$Avg <- rowMeans(subset(df_MLP, select = c(-Player)), na.rm = TRUE)
df_XGBoost$Avg <- rowMeans(subset(df_XGBoost, select = c(-Player)), na.rm = TRUE)
df_Avg$Avg <- rowMeans(subset(df_Avg, select = c(-Player)), na.rm = TRUE)
# Send to global environment
# df_RF <<- df_RF
# df_SVM <<- df_SVM
# df_MLP <<- df_MLP
# df_XGBoost <<- df_XGBoost
# df_Avg <<- df_Avg
### Choice between filtering by average probability
#bestAvg <- filter(df_Avg, Avg >= .1)
### or filtering by highest probability throughout time interval indicated
bestAvg <- filter(df_Avg, rowMaxs(as.matrix(df_Avg[,2:ncol(df_Avg)])) > 0.5)
### Sort by Average
#bestAvg <- bestAvg[order(bestAvg[,-Avg]),]
###
### Removes Average column, only used to filter.
bestAvg <- subset(bestAvg, select = -c(Avg))
### Sort by most recent date
bestAvg <- bestAvg[order(bestAvg[,ncol(bestAvg)], decreasing = TRUE),]
### Sends bestAvg to the global environment, for testing purposes
bestAvg <<- bestAvg
cluster_sizes <- cluster_recent(bestAvg)
startIndex <- 1
for(i in 1:length(cluster_sizes)) {
endIndex <- startIndex + (cluster_sizes[i] - 1)
plot_Nplayers(bestAvg, startIndex, endIndex, endDate)
startIndex <- endIndex + 1
}
}
plot_predictions_line_graph("2021-12-01", "2021-12-28")
plot_predictions_line_graph("2021-12-01", "2021-12-28")
`library(dplyr)
library(ggplot2)
library(tibble)
library(janitor)
library(stringr)
library(lubridate)
library(matrixStats)
plot_predictions_line_graph <- function(startDate, endDate) { #YYYY-MM-DD format
### reshape2 provides a pretty big warning with the melt function...
options(warn=-1)
# Need to initialize these data frames or else you'll get an error later
# when you try to put data into them.
df_RF <- data.frame(Player = "")
df_SVM <- data.frame(Player = "")
df_MLP <- data.frame(Player = "")
df_XGBoost <- data.frame(Player = "")
df_Avg <- data.frame(Player = "")
for(date in seq(as_date(startDate), as_date(endDate), by = "day")) {
year <- substr(as_date(date), 1, 4)
month <- substr(as_date(date), 6, 7)
day <- substr(as_date(date), 9, 10)
date <- paste(year, month, day, sep="")
date_dash <- paste(year, month, day, sep="-")
fileName <- paste("stats_", date, "_modeled", sep="")
folderName <- paste(year, "-", month, "-", day, "/", sep="")
fullPath <- paste("~/GitHub/All-Star-Predictions/baseData/dailystats/", folderName, fileName, ".csv", sep="")
temp_stats <- read.csv(fullPath)
df <- select(temp_stats, Player, RF, SVM, kNN, MLP, XGBoost, Avg)
df$Avg <- rowMeans(subset(df, select = c(RF, SVM, MLP, XGBoost)), na.rm = TRUE) # Removed kNN because it is consistently lower than the other models.
# Only filtered out practically irrelevant players
topCandidates <- filter(df, Avg >= 0) # Change this to 0.25 if needed
### Tried using lapply on these next few, but was not successful.
# Isolates data
RFonly <- select(topCandidates, Player, RF)
SVMonly <- select(topCandidates, Player, SVM)
MLPonly <- select(topCandidates, Player, MLP)
XGBoostonly <- select(topCandidates, Player, XGBoost)
Avgonly <- select(topCandidates, Player, Avg)
# Combines all such data
df_RF <- merge(df_RF, RFonly, by = "Player", all = TRUE)
df_SVM <- merge(df_SVM, SVMonly, by = "Player", all = TRUE)
df_MLP <- merge(df_MLP, MLPonly, by = "Player", all = TRUE)
df_XGBoost <- merge(df_XGBoost, XGBoostonly, by = "Player", all = TRUE)
df_Avg <- merge(df_Avg, Avgonly, by = "Player", all = TRUE)
# Renames columns to dates
names(df_RF)[names(df_RF) == 'RF'] <- date_dash
names(df_SVM)[names(df_SVM) == 'SVM'] <- date_dash
names(df_MLP)[names(df_MLP) == 'MLP'] <- date_dash
names(df_XGBoost)[names(df_XGBoost) == 'XGBoost'] <- date_dash
names(df_Avg)[names(df_Avg) == 'Avg'] <- date_dash
}
topCandidates <<- topCandidates
# Removes first column
df_RF <- df_RF[-1,]
df_SVM <- df_SVM[-1,]
df_MLP <- df_MLP[-1,]
df_XGBoost <- df_XGBoost[-1,]
df_Avg <- df_Avg[-1,]
df_RF$Avg <- rowMeans(subset(df_RF, select = c(-Player)), na.rm = TRUE)
df_SVM$Avg <- rowMeans(subset(df_SVM, select = c(-Player)), na.rm = TRUE)
df_MLP$Avg <- rowMeans(subset(df_MLP, select = c(-Player)), na.rm = TRUE)
df_XGBoost$Avg <- rowMeans(subset(df_XGBoost, select = c(-Player)), na.rm = TRUE)
df_Avg$Avg <- rowMeans(subset(df_Avg, select = c(-Player)), na.rm = TRUE)
# Send to global environment
# df_RF <<- df_RF
# df_SVM <<- df_SVM
# df_MLP <<- df_MLP
# df_XGBoost <<- df_XGBoost
# df_Avg <<- df_Avg
### Choice between filtering by average probability
bestAvg <- filter(df_Avg, df_Avg[ncol(df_Avg)] >= .25)
### or filtering by highest probability throughout time interval indicated
#bestAvg <- filter(df_Avg, rowMaxs(as.matrix(df_Avg[,2:ncol(df_Avg)])) > 0.5)
### Sort by Average
#bestAvg <- bestAvg[order(bestAvg[,-Avg]),]
###
### Removes Average column, only used to filter.
bestAvg <- subset(bestAvg, select = -c(Avg))
### Sort by most recent date
bestAvg <- bestAvg[order(bestAvg[,ncol(bestAvg)], decreasing = TRUE),]
### Sends bestAvg to the global environment, for testing purposes
bestAvg <<- bestAvg
cluster_sizes <- cluster_recent(bestAvg)
startIndex <- 1
for(i in 1:length(cluster_sizes)) {
endIndex <- startIndex + (cluster_sizes[i] - 1)
plot_Nplayers(bestAvg, startIndex, endIndex, endDate)
startIndex <- endIndex + 1
}
}`
library(dplyr)
library(ggplot2)
library(tibble)
library(janitor)
library(stringr)
library(lubridate)
library(matrixStats)
plot_predictions_line_graph <- function(startDate, endDate) { #YYYY-MM-DD format
### reshape2 provides a pretty big warning with the melt function...
options(warn=-1)
# Need to initialize these data frames or else you'll get an error later
# when you try to put data into them.
df_RF <- data.frame(Player = "")
df_SVM <- data.frame(Player = "")
df_MLP <- data.frame(Player = "")
df_XGBoost <- data.frame(Player = "")
df_Avg <- data.frame(Player = "")
for(date in seq(as_date(startDate), as_date(endDate), by = "day")) {
year <- substr(as_date(date), 1, 4)
month <- substr(as_date(date), 6, 7)
day <- substr(as_date(date), 9, 10)
date <- paste(year, month, day, sep="")
date_dash <- paste(year, month, day, sep="-")
fileName <- paste("stats_", date, "_modeled", sep="")
folderName <- paste(year, "-", month, "-", day, "/", sep="")
fullPath <- paste("~/GitHub/All-Star-Predictions/baseData/dailystats/", folderName, fileName, ".csv", sep="")
temp_stats <- read.csv(fullPath)
df <- select(temp_stats, Player, RF, SVM, kNN, MLP, XGBoost, Avg)
df$Avg <- rowMeans(subset(df, select = c(RF, SVM, MLP, XGBoost)), na.rm = TRUE) # Removed kNN because it is consistently lower than the other models.
# Only filtered out practically irrelevant players
topCandidates <- filter(df, Avg >= 0) # Change this to 0.25 if needed
### Tried using lapply on these next few, but was not successful.
# Isolates data
RFonly <- select(topCandidates, Player, RF)
SVMonly <- select(topCandidates, Player, SVM)
MLPonly <- select(topCandidates, Player, MLP)
XGBoostonly <- select(topCandidates, Player, XGBoost)
Avgonly <- select(topCandidates, Player, Avg)
# Combines all such data
df_RF <- merge(df_RF, RFonly, by = "Player", all = TRUE)
df_SVM <- merge(df_SVM, SVMonly, by = "Player", all = TRUE)
df_MLP <- merge(df_MLP, MLPonly, by = "Player", all = TRUE)
df_XGBoost <- merge(df_XGBoost, XGBoostonly, by = "Player", all = TRUE)
df_Avg <- merge(df_Avg, Avgonly, by = "Player", all = TRUE)
# Renames columns to dates
names(df_RF)[names(df_RF) == 'RF'] <- date_dash
names(df_SVM)[names(df_SVM) == 'SVM'] <- date_dash
names(df_MLP)[names(df_MLP) == 'MLP'] <- date_dash
names(df_XGBoost)[names(df_XGBoost) == 'XGBoost'] <- date_dash
names(df_Avg)[names(df_Avg) == 'Avg'] <- date_dash
}
topCandidates <<- topCandidates
# Removes first column
df_RF <- df_RF[-1,]
df_SVM <- df_SVM[-1,]
df_MLP <- df_MLP[-1,]
df_XGBoost <- df_XGBoost[-1,]
df_Avg <- df_Avg[-1,]
df_RF$Avg <- rowMeans(subset(df_RF, select = c(-Player)), na.rm = TRUE)
df_SVM$Avg <- rowMeans(subset(df_SVM, select = c(-Player)), na.rm = TRUE)
df_MLP$Avg <- rowMeans(subset(df_MLP, select = c(-Player)), na.rm = TRUE)
df_XGBoost$Avg <- rowMeans(subset(df_XGBoost, select = c(-Player)), na.rm = TRUE)
df_Avg$Avg <- rowMeans(subset(df_Avg, select = c(-Player)), na.rm = TRUE)
# Send to global environment
# df_RF <<- df_RF
# df_SVM <<- df_SVM
# df_MLP <<- df_MLP
# df_XGBoost <<- df_XGBoost
# df_Avg <<- df_Avg
### Choice between filtering by average probability
bestAvg <- filter(df_Avg, df_Avg[ncol(df_Avg)] >= .25)
### or filtering by highest probability throughout time interval indicated
#bestAvg <- filter(df_Avg, rowMaxs(as.matrix(df_Avg[,2:ncol(df_Avg)])) > 0.5)
### Sort by Average
#bestAvg <- bestAvg[order(bestAvg[,-Avg]),]
###
### Removes Average column, only used to filter.
bestAvg <- subset(bestAvg, select = -c(Avg))
### Sort by most recent date
bestAvg <- bestAvg[order(bestAvg[,ncol(bestAvg)], decreasing = TRUE),]
### Sends bestAvg to the global environment, for testing purposes
bestAvg <<- bestAvg
cluster_sizes <- cluster_recent(bestAvg)
startIndex <- 1
for(i in 1:length(cluster_sizes)) {
endIndex <- startIndex + (cluster_sizes[i] - 1)
plot_Nplayers(bestAvg, startIndex, endIndex, endDate)
startIndex <- endIndex + 1
}
}
plot_predictions_line_graph("2021-12-01", "2021-12-28")
library(directlabels)
library(scales)
library(RColorBrewer)
library(reshape2)
plot_Nplayers <- function(data, startIndex, endIndex, endDate) {
# Preparation for melt
data_subset <- data[startIndex:endIndex,]
# Melt, converts a data.frame from rows of players and columns as dates to:
# | Player | variable (Dates) | value (Probabilities) |
melted_players <- melt(data_subset, id='Player')
# Creates a color vector, which is then saved to the melt data frame
col_vector <- rep(NA, nrow(melted_players))
melted_names <- melted_players[,1]
for(index in 1:nrow(melted_players)) {
currName <- melted_names[index]
teamCode <- players2022$Tm[which(players2022$Player == currName)]
currColor <- teamcolors$Color[which(teamcolors$Abbrev == teamCode)]
col_vector[index] <- currColor
}
col_vector <<- col_vector
melted_players['color'] <- col_vector
# Converts player names from Firstname Lastname to F. Lastname
player_names <- melted_players['Player']
for(i in 1:nrow(player_names)) {
player_names[i,1] <- convert_name(player_names[i,1])
}
melted_players['Player'] <- player_names
# Sends to global environment for inspection if needed.
# melted_players <<- melted_players
# Adjusts x-axis to be further out to accommodate directlabels
lastDate <- melted_players[nrow(melted_players),2]
range <-  c(as.Date("2021-12-01"), as.Date(endDate) + 3)
lineplot <- ggplot(data=melted_players, aes(x=as.Date(variable), y=value, group=Player)) +
geom_line(size=1, color = melted_players$color, group=melted_players$Player) +
geom_point(size=2, color = melted_players$color, group=melted_players$Player) +
theme_bw() + # Removes gray
theme(panel.grid.minor.x = element_blank()) + # no minor axis lines
theme(panel.grid.minor.y = element_blank()) +
theme(legend.position="none") + # no legend
xlab("") +
ylab("Ensemble Average Probability") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, size = 12)) +
theme(axis.title.y = element_text(size = 16)) +
theme(axis.text.y = element_text(size = 14)) +
scale_x_date(date_breaks = "3 days", limits = range) + # Major axis (x) every three days, limits as set above
geom_dl(aes(label = Player), color = melted_players$color, group=melted_players$Player, method = list(dl.trans(x = x + 0.2), "last.bumpup", cex = .9))
#These global assignments are for sanity checking and could just as easily be removed.
lineplot <<- lineplot
print(lineplot)
ggsave(
### Decomment this first line and comment the second line if you're doing the Avg > 0.1 filter instead of the Max > 0.5 filter
#filename = paste("Over 0.1 - Top ", startIndex, "-", endIndex, " players.png", sep=""),
filename = paste("Top ", startIndex, "-", endIndex, " players.png", sep=""),
plot = lineplot,
device = "png",
path = "~/GitHub/All-Star-Predictions/R/Graphs/lineplots/",
width = 12,
height = 9,
units = "in",
dpi = 500,
)
}
plot_predictions_line_graph("2021-12-01", "2021-12-28")
plot_predictions("2021", "12", "17)")
plot_predictions("2021", "12", "17")
plot_predictions("2021", "12", "01")
plot_predictions("2021", "12", "02")
plot_predictions("2021", "12", "03")
plot_predictions_line_graph("2021-12-01", "2021-12-28")
plot_predictions_line_graph("2021-12-01", "2021-12-28")
plot_predictions_line_graph("2021-12-01", "2021-12-28")
plot_predictions_line_graph("2021-12-01", "2021-12-28")
automate_plotting("2021-12-01", "2021-12-10")
plot_predictions("2021", "12", "29")
plot_predictions_line_graph("2021-12-01", "2021-12-29")
plot_predictions_line_graph("2021-12-01", "2021-12-29")
library(dplyr)
library(ggplot2)
library(tibble)
library(janitor)
library(stringr)
library(lubridate)
library(matrixStats)
plot_predictions_line_graph <- function(startDate, endDate) { #YYYY-MM-DD format
### reshape2 provides a pretty big warning with the melt function...
options(warn=-1)
# Need to initialize these data frames or else you'll get an error later
# when you try to put data into them.
df_RF <- data.frame(Player = "")
df_SVM <- data.frame(Player = "")
df_MLP <- data.frame(Player = "")
df_XGBoost <- data.frame(Player = "")
df_Avg <- data.frame(Player = "")
for(date in seq(as_date(startDate), as_date(endDate), by = "day")) {
year <- substr(as_date(date), 1, 4)
month <- substr(as_date(date), 6, 7)
day <- substr(as_date(date), 9, 10)
date <- paste(year, month, day, sep="")
date_dash <- paste(year, month, day, sep="-")
fileName <- paste("stats_", date, "_modeled", sep="")
folderName <- paste(year, "-", month, "-", day, "/", sep="")
fullPath <- paste("~/GitHub/All-Star-Predictions/baseData/dailystats/", folderName, fileName, ".csv", sep="")
temp_stats <- read.csv(fullPath)
df <- select(temp_stats, Player, RF, SVM, kNN, MLP, XGBoost, Avg)
df$Avg <- rowMeans(subset(df, select = c(RF, SVM, MLP, XGBoost)), na.rm = TRUE) # Removed kNN because it is consistently lower than the other models.
# Only filtered out practically irrelevant players
topCandidates <- filter(df, Avg >= 0) # Change this to 0.25 if needed
### Tried using lapply on these next few, but was not successful.
# Isolates data
RFonly <- select(topCandidates, Player, RF)
SVMonly <- select(topCandidates, Player, SVM)
MLPonly <- select(topCandidates, Player, MLP)
XGBoostonly <- select(topCandidates, Player, XGBoost)
Avgonly <- select(topCandidates, Player, Avg)
# Combines all such data
df_RF <- merge(df_RF, RFonly, by = "Player", all = TRUE)
df_SVM <- merge(df_SVM, SVMonly, by = "Player", all = TRUE)
df_MLP <- merge(df_MLP, MLPonly, by = "Player", all = TRUE)
df_XGBoost <- merge(df_XGBoost, XGBoostonly, by = "Player", all = TRUE)
df_Avg <- merge(df_Avg, Avgonly, by = "Player", all = TRUE)
# Renames columns to dates
names(df_RF)[names(df_RF) == 'RF'] <- date_dash
names(df_SVM)[names(df_SVM) == 'SVM'] <- date_dash
names(df_MLP)[names(df_MLP) == 'MLP'] <- date_dash
names(df_XGBoost)[names(df_XGBoost) == 'XGBoost'] <- date_dash
names(df_Avg)[names(df_Avg) == 'Avg'] <- date_dash
}
topCandidates <<- topCandidates
# Removes first column
df_RF <- df_RF[-1,]
df_SVM <- df_SVM[-1,]
df_MLP <- df_MLP[-1,]
df_XGBoost <- df_XGBoost[-1,]
df_Avg <- df_Avg[-1,]
df_RF$Avg <- rowMeans(subset(df_RF, select = c(-Player)), na.rm = TRUE)
df_SVM$Avg <- rowMeans(subset(df_SVM, select = c(-Player)), na.rm = TRUE)
df_MLP$Avg <- rowMeans(subset(df_MLP, select = c(-Player)), na.rm = TRUE)
df_XGBoost$Avg <- rowMeans(subset(df_XGBoost, select = c(-Player)), na.rm = TRUE)
df_Avg$Avg <- rowMeans(subset(df_Avg, select = c(-Player)), na.rm = TRUE)
# Send to global environment
# df_RF <<- df_RF
# df_SVM <<- df_SVM
# df_MLP <<- df_MLP
# df_XGBoost <<- df_XGBoost
# df_Avg <<- df_Avg
### Choice between filtering by average probability
bestAvg <- filter(df_Avg, df_Avg[ncol(df_Avg)] >= .25)
### or filtering by highest probability throughout time interval indicated
#bestAvg <- filter(df_Avg, rowMaxs(as.matrix(df_Avg[,2:ncol(df_Avg)])) > 0.5)
### Sort by Average
#bestAvg <- bestAvg[order(bestAvg[,-Avg]),]
###
### Removes Average column, only used to filter.
bestAvg <- subset(bestAvg, select = -c(Avg))
### Sort by most recent date
bestAvg <- bestAvg[order(bestAvg[,ncol(bestAvg)], decreasing = TRUE),]
### Sends bestAvg to the global environment, for testing purposes
bestAvg <<- bestAvg
cluster_sizes <- cluster_recent(bestAvg)
startIndex <- 1
for(i in 1:length(cluster_sizes)) {
endIndex <- startIndex + (cluster_sizes[i] - 1)
plot_Nplayers(bestAvg, startIndex, endIndex, endDate)
startIndex <- endIndex + 1
}
}
library(directlabels)
library(scales)
library(RColorBrewer)
library(reshape2)
plot_Nplayers <- function(data, startIndex, endIndex, endDate) {
# Preparation for melt
data_subset <- data[startIndex:endIndex,]
# Melt, converts a data.frame from rows of players and columns as dates to:
# | Player | variable (Dates) | value (Probabilities) |
melted_players <- melt(data_subset, id='Player')
# Creates a color vector, which is then saved to the melt data frame
col_vector <- rep(NA, nrow(melted_players))
melted_names <- melted_players[,1]
for(index in 1:nrow(melted_players)) {
currName <- melted_names[index]
teamCode <- players2022$Tm[which(players2022$Player == currName)]
currColor <- teamcolors$Color[which(teamcolors$Abbrev == teamCode)]
col_vector[index] <- currColor
}
col_vector <<- col_vector
melted_players['color'] <- col_vector
# Converts player names from Firstname Lastname to F. Lastname
player_names <- melted_players['Player']
for(i in 1:nrow(player_names)) {
player_names[i,1] <- convert_name(player_names[i,1])
}
melted_players['Player'] <- player_names
# Sends to global environment for inspection if needed.
# melted_players <<- melted_players
# Adjusts x-axis to be further out to accommodate directlabels
lastDate <- melted_players[nrow(melted_players),2]
range <-  c(as.Date("2021-12-01"), as.Date(endDate) + 3)
lineplot <- ggplot(data=melted_players, aes(x=as.Date(variable), y=value, group=Player)) +
geom_line(size=1, color = melted_players$color, group=melted_players$Player) +
geom_point(size=2, color = melted_players$color, group=melted_players$Player) +
theme_bw() + # Removes gray
theme(panel.grid.minor.x = element_blank()) + # no minor axis lines
theme(panel.grid.minor.y = element_blank()) +
theme(legend.position="none") + # no legend
xlab("") +
ylab("Ensemble Average Probability") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, size = 12)) +
theme(axis.title.y = element_text(size = 16)) +
theme(axis.text.y = element_text(size = 14)) +
scale_x_date(date_breaks = "3 days", limits = range) + # Major axis (x) every three days, limits as set above
geom_dl(aes(label = Player), color = melted_players$color, group=melted_players$Player, method = list(dl.trans(x = x + 0.2), "last.bumpup", cex = .9))
#These global assignments are for sanity checking and could just as easily be removed.
lineplot <<- lineplot
print(lineplot)
ggsave(
### Decomment this first line and comment the second line if you're doing the Avg > 0.1 filter instead of the Max > 0.5 filter
#filename = paste("Over 0.1 - Top ", startIndex, "-", endIndex, " players.png", sep=""),
filename = paste("Top ", startIndex, "-", endIndex, " players.png", sep=""),
plot = lineplot,
device = "png",
path = "~/GitHub/All-Star-Predictions/R/Graphs/lineplots/",
width = 12,
height = 9,
units = "in",
dpi = 500,
)
}
plot_predictions_line_graph("2021-12-01", "2021-12-29")
plot_predictions_line_graph("2021-12-01", "2021-12-29")
